syntax = "proto3";

option go_package = "/genproto/user";

package ecommerce;

// User role and courier status enums
enum UserRole {
    USER = 0;
    ADMIN = 1;
}

enum CourierStatusAuth {
    Courier_AVAILABLE = 0;
    Courier_UNAVAILABLE = 1;
    Courier_ON_DELIVERY = 2;
}

// User message to represent a user
message User {
    string user_id = 1;     // Foydalanuvchi ID'si
    string email = 2;       // Foydalanuvchi email manzili
    string full_name = 3;   // Foydalanuvchi to'liq ismi
    UserRole role = 4;      // Foydalanuvchi roli
    string created_at = 5;  // Foydalanuvchi yaratilgan vaqti
    string updated_at = 6;  // Foydalanuvchi yangilangan vaqti
}

// Courier message to represent a courier
message CourierAuth {
    string courier_id = 1;   // Kuryer ID'si
    string email = 2;        // Kuryer email manzili
    string full_name = 3;    // Kuryer to'liq ismi
    string phone_number = 4; // Kuryer telefon raqami
    CourierStatusAuth status = 5;// Kuryer holati
    string created_at = 6;   // Kuryer yaratilgan vaqti
    string updated_at = 7;   // Kuryer yangilangan vaqti
}

// Request message for user registration
message UserRegisterRequest {
    string email = 1;       // Foydalanuvchi email manzilix
    string password = 2;    // Foydalanuvchi paroli
    string full_name = 3;   // Foydalanuvchi to'liq ismi
}

// Response message for user registration
message UserRegisterResponse {
    bool success = 1;       // Amaliyot muvaffaqiyatli bo'lganligini bildiruvchi flag
    string message = 2;     // Javob xabari
    User user = 3;          // Foydalanuvchi ma'lumotlari
}

// Request message for user login
message UserLoginRequest {
    string email = 1;       // Foydalanuvchi email manzili
    string password = 2;    // Foydalanuvchi paroli
}

// Response message for user login
message UserLoginResponse {
    bool success = 1;       // Amaliyot muvaffaqiyatli bo'lganligini bildiruvchi flag
    string message = 2;     // Javob xabari
    string token = 3;       // JWT token or session ID
    User user = 4;          // Foydalanuvchi ma'lumotlari
}

// Request message for user CRUD operations
message UserRequest {
    string user_id = 1;     // Foydalanuvchi ID'si
}

// Request message for creating a user
message CreateUserRequest {
    string email = 1;       // Foydalanuvchi email manzili
    string password = 2;    // Foydalanuvchi paroli
    string full_name = 3;   // Foydalanuvchi to'liq ismi
    UserRole role = 4;      // Foydalanuvchi roli
}

// Request message for updating a user
message UpdateUserRequest {
    string user_id = 1;     // Foydalanuvchi ID'si
    string email = 2;       // Foydalanuvchi email manzili
    string full_name = 3;   // Foydalanuvchi to'liq ismi
    UserRole role = 4;      // Foydalanuvchi roli
}

// Response message for user CRUD operations
message UserResponse {
    bool success = 1;       // Amaliyot muvaffaqiyatli bo'lganligini bildiruvchi flag
    string message = 2;     // Javob xabari
    User user = 3;          // Foydalanuvchi ma'lumotlari
}

// Request message for courier registration
message CourierRegisterRequest {
    string email = 1;       // Kuryer email manzili
    string password = 2;    // Kuryer paroli
    string full_name = 3;   // Kuryer to'liq ismi
    string phone_number = 4;// Kuryer telefon raqami
}

// Response message for courier registration
message CourierRegisterResponse {
    bool success = 1;       // Amaliyot muvaffaqiyatli bo'lganligini bildiruvchi flag
    string message = 2;     // Javob xabari
    CourierAuth courier = 3;    // Kuryer ma'lumotlari
}

// Request message for courier login
message CourierLoginRequest {
    string email = 1;       // Kuryer email manzili
    string password = 2;    // Kuryer paroli
}

// Response message for courier login
message CourierLoginResponse {
    bool success = 1;       // Amaliyot muvaffaqiyatli bo'lganligini bildiruvchi flag
    string message = 2;     // Javob xabari
    string token = 3;       // JWT token or session ID
    CourierAuth courier = 4;    // Kuryer ma'lumotlari
}

// Request message for courier CRUD operations
message CourierRequestAuth {
    string courier_id = 1;  // Kuryer ID'si
}

// Request message for creating a courier
message CreateCourierRequestAuth {
    string email = 1;       // Kuryer email manzili
    string password = 2;    // Kuryer paroli
    string full_name = 3;   // Kuryer to'liq ismi
    string phone_number = 4;// Kuryer telefon raqami
    CourierStatusAuth status = 5;// Kuryer holati
}

// Request message for updating a courier
message UpdateCourierRequestAuth {
    string courier_id = 1;  // Kuryer ID'si
    string email = 2;       // Kuryer email manzili
    string full_name = 3;   // Kuryer to'liq ismi
    string phone_number = 4;// Kuryer telefon raqami
    CourierStatusAuth status = 5;// Kuryer holati
}

// Response message for courier CRUD operations
message CourierResponseAuth {
    bool success = 1;       // Amaliyot muvaffaqiyatli bo'lganligini bildiruvchi flag
    string message = 2;     // Javob xabari
    CourierAuth courier = 3;    // Kuryer ma'lumotlari
}


// user.proto

message GetAllUsersRequest {}

message GetAllUsersResponse {
  bool success = 1;
  string message = 2;
  repeated User users = 3;
}

// courier.proto

message GetAllCouriersRequest {}

message GetAllCouriersResponse {
  bool success = 1;
  string message = 2;
  repeated CourierAuth couriers = 3;
}

// Service to manage user and courier authentication and CRUD operations
service AuthService {
    // Foydalanuvchi uchun autentifikatsiyani amalga oshirish
    rpc UserLogin(UserLoginRequest) returns (UserLoginResponse);

    // Foydalanuvchi uchun ro'yxatdan o'tish
    rpc UserRegister(UserRegisterRequest) returns (UserRegisterResponse);

    // Kuryer uchun autentifikatsiyani amalga oshirish
    rpc CourierLogin(CourierLoginRequest) returns (CourierLoginResponse);

    // Kuryer uchun ro'yxatdan o'tish
    rpc CourierRegister(CourierRegisterRequest) returns (CourierRegisterResponse);

    // Foydalanuvchi yaratish
    rpc CreateUser(CreateUserRequest) returns (UserResponse);

    // Foydalanuvchi ma'lumotlarini olish
    rpc GetUser(UserRequest) returns (UserResponse);

    // Foydalanuvchilar ro'yxatini olish
    rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse);

    
    // Foydalanuvchi ma'lumotlarini yangilash
    rpc UpdateUser(UpdateUserRequest) returns (UserResponse);
    
    // Foydalanuvchi o'chirish
    rpc DeleteUser(UserRequest) returns (UserResponse);
    
    // Kuryer yaratish
    rpc CreateCourier(CreateCourierRequestAuth) returns (CourierResponseAuth);
    
    // Kuryer ma'lumotlarini olish
    rpc GetCourier(CourierRequestAuth) returns (CourierResponseAuth);
    
    // Kuryerlar ro'yxatini olish
    rpc GetAllCouriers(GetAllCouriersRequest) returns (GetAllCouriersResponse);
    
    // Kuryer ma'lumotlarini yangilash
    rpc UpdateCourier(UpdateCourierRequestAuth) returns (CourierResponseAuth);
    
    // Kuryer o'chirish
    rpc DeleteCourier(CourierRequestAuth) returns (CourierResponseAuth);
}
